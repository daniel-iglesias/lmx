/***************************************************************************
 *   Copyright (C) 2005 by Daniel Iglesias                                 *
 *   dani@localhost.localdomain                                            *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Library General Public License as       *
 *   published by the Free Software Foundation; either version 2 of the    *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU Library General Public     *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
#ifndef GAUSS_SOLVER_H
#define GAUSS_SOLVER_H

// #include "lmx_except.h"

//////////////////////////////////////////// Doxygen file documentation entry:
    /*!
      \file gauss_solver.h

      \brief Gaussian elimination class implementation

      Implements Gaussian elimination linear solver method.

      \author Daniel Iglesias Ibï¿½ez

     */
//////////////////////////////////////////// Doxygen file documentation (end)

struct lmx::exception_callback;

namespace lmx{

/**
 *
 * \class Cg
 * \brief Template class Gauss.
 *
 * @author Daniel Iglesias Ibáñez.
 */
template <typename T> class Gauss{
  private:
    DenseMatrix<T> mat;
    Vector<T> vec;
    size_type dim;

  public:
    /**
     * Empty constructor.
     */
    Gauss(){}

    Gauss( Matrix<T>*, Vector<T>* );

    /**
     * Destructor
     */
    ~Gauss(){}

    Vector<T>& solve();

};

template <typename T>
    /**
     * Standard constructor.
     * @param mat_in Pointer to Matrix.
     * @param vec_in Pointer to Vector.
     */
    Gauss<T>::Gauss( Matrix<T>* mat_in, Vector<T>* vec_in )
  : vec(*vec_in), dim( mat_in->rows() )
{
  if( mat_in->rows() != mat_in->cols() ){
    std::stringstream message;
    message << "Trying to build a Gauss object with a non-squared matrix.\nSize of matrix(" << mat_in->rows() << ", " << mat_in->cols() << ")." << endl;
    LMX_THROW(dimension_error, message.str() );
  }

  mat.resize( dim , dim );
  for (size_type i=0; i<dim; ++i){
    for (size_type j=0; j<dim; ++j){
      mat.writeElement( mat_in->readElement(i,j), i, j );
    }
  }
}


template <typename T>
    /**
     * Solve system
     * @return Reference to solution vector.
     */
    Vector<T>& Gauss<T>::solve()
{
  for(int k = 0; k < dim - 1 ;++k)
  {
    if ( mat(k,k) == 0 ){
      std::stringstream message;
      message << "Null pivot diagonal term!!. Term position: " << k << ". Squared Matrix dimension: " << dim << "." << endl;
      LMX_THROW(internal_error, message.str() );
    }

    for(int i = k + 1; i < dim; ++i){

      if( mat(i,k) != 0 ){
        T mult = mat(i,k) / mat(k,k);
        mat(i,k) = mult;
        for(int j = k + 1; j < dim; ++j)
          mat(i,j) -= mult * mat(k,j);
      }
    }
  }

  for(int i = 1; i < dim; ++i){
    for(int j = 0; j < i; ++j)
      vec(i) -= mat(i,j) * vec(j);
  }

  for(int i = dim - 1; i >= 0; --i){
    for(int j = i+1; j<dim; ++j){
      vec(i) -= mat(i,j) * vec(j);
    }
    vec(i) /= mat(i,i);
  }

  return vec;
}



}

#endif
