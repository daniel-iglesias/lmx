/***************************************************************************
 *   Copyright (C) 2005 by Daniel Iglesias                                 *
 *   diglesiasib@mecanica.upm.es                                           *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Library General Public License as       *
 *   published by the Free Software Foundation; either version 2 of the    *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU Library General Public     *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
#ifndef LMXTYPE_CMATRIX_H
#define LMXTYPE_CMATRIX_H

#include "lmx_mat_data_mat.h"
#include "lmx_mat_aux_getmem.h"

//////////////////////////////////////////// Doxygen file documentation entry:
    /*!
      \file type_cmatrix.h

      \brief This file contains both the declaration and implementation for type_cmatrix (C-array type) class member functions.

      \author Daniel Iglesias Ibanez

    */
//////////////////////////////////////////// Doxygen file documentation (end)


namespace lmx {

    /**
    \class Type_cmatrix
    \brief Template class Type_cmatrix

    This class implements the methods defined in virtual class data_mat for dense matrix built with C-array.

    @param contents Corresponds to a type T**.

    @author Daniel Iglesias Ibanez.
    */
template <typename T> class Type_cmatrix : public Data_mat<T>
{
private:
  /** Matrix data contents */
    size_type rows, cols;
    T** contents;
    
public:
    /// Empty constructor.
    Type_cmatrix()
    {}

    Type_cmatrix(size_type, size_type);

    /// Destructor.
    ~Type_cmatrix()
    {
//       if(rows != 0 || cols != 0)
//         free(&(((T*)contents)[-1]));
    }

  void resize(size_type, size_type);

    /** Read element method.
      * Implements a method for reading data of the dense matrix.
      * \param mrows Row position in dense matrix.
      * \param ncolumns Column position in dense matrix.
      * \return Value of the element in the position given by the parameters. */
  inline T readElement(size_type mrows, size_type ncolumns) const
   { return contents[mrows][ncolumns]; }
  
    /** Write element method.
      * Implements a method for writing data on the dense matrix.
      * \param mrows Row position in dense matrix.
      * \param ncolumns Column position in dense matrix.
      * \param value Numerical type value. */
  void writeElement(T value, size_type mrows, size_type ncolumns)
   { contents[mrows][ncolumns] = value; }
  
   /** Method for knowing the number of data rows. 
    * \returns Number of rows.
    */
  size_type getRows() const
   { return rows; }

   /** Method for knowing the number of data columns. 
    * \returns Number of columns.
    */
  size_type getCols() const
   { return cols; }

    /** Copy method.
      * Equals the data in the object's contents to those given by the input matrix parameter.
      * \param matrix_in pointer to an object that belongs to a class derived from Data. */
  void equals(const Data<T>* matrix_in)
   { for (size_type i=0; i<rows; ++i){
       for (size_type j=0; j<cols; ++j){
         contents[i][j] = matrix_in->readElement(i,j);
       }
     }
   }
  
    /** Add method.
      * Adds the the input matrix parameter's elements to the object's contents.
      * Necessary for overloading the "+=" operator.
      * \param matrix_in_1 pointer to an object that belongs to a class derived from Data. */
  void add(const Data<T>* matrix_in_1)
  { for (size_type i=0; i<rows; ++i){
      for (size_type j=0; j<cols; ++j){
        contents[i][j] += matrix_in_1->readElement(i,j);
      }
    }
  }
 
    /** Substract method.
      * Substracts the the input matrix parameter's elements to the object's contents.
      * Necessary for overloading the "-=" operator.
      * \param matrix_in_1 pointer to an object that belongs to a class derived from Data. */
  void substract(const Data<T>* matrix_in_1)
  { for (size_type i=0; i<rows; ++i){
      for (size_type j=0; j<cols; ++j){
        contents[i][j] -= matrix_in_1->readElement(i,j);
      }
    }
  }


    /** Multiply method.
      * Multiplies the input matrices and saves the result into the object's contents.
      * Necessary for overloading the "*" operator.
      * \param matrix_in_1 pointer to an object that belongs to a class derived from Data.
      * \param matrix_in_2 pointer to an object that belongs to a class derived from Data. */
  void multiply(const Data<T>* matrix_in_1, const Data<T>* matrix_in_2)
  { this->resize( matrix_in_1->getRows(), matrix_in_2->getCols() );
    for (size_type i=0; i<rows; ++i){
      for (size_type j=0; j<matrix_in_2->getRows(); ++j){
        for (size_type k=0; k<cols; ++k){
          contents[i][k] += matrix_in_1->readElement(i,j)
                          * matrix_in_2->readElement(j,k);
        }
      }
    }
  }
   
    /** Multiply scalar method.
      * Multiplies the object's matrix (contents) with a scalar.
      * Necessary for overloading the "*" operator.
      * \param scalar A scalar factor of template's class. */
  void multiplyScalar(const T& scalar)
  { for (size_type i=0; i<rows; ++i){
      for (size_type j=0; j<cols; ++j){
        contents[i][j] *= scalar;
      }
    }
  }

  /** Method multiplying element-by-element of two matrices. One would be the object's contents and the other the parameter's contents.
   * Necessary for implementing  Vector to Vector multElem.
   * \param matrix_in pointer to an object that belongs to a class derived from Data.
     */
  void multiplyElements(const Data<T>* matrix_in)
  {
    for (size_type i=0; i<rows; ++i){
      for (size_type j=0; j<cols; ++j)
        contents[i][j] *= matrix_in->readElement(i,j);
    }
  }



  /** Read data in Matrix Market format method.
   * Opens the file specified and reads the matrix's data in it, 
   * suposing it's stored in Matrix Market format.
   * \param input_file Name of the file to be read.
   *  */
  void read_mm_file(const char* input_file)
  { // To be implemented
  }

  /** Read data in Harwell-Boeing format method.
   * Opens the file specified and reads the matrix's data in it, 
   * suposing it's stored in Harwell-Boeing format.
   * 
   * \param input_file Name of the file to be read.
   */
  void read_hb_file(const char* input_file)
  { // To be implemented
  }

    /** Traspose method.
      * Swaps elements with respect to the diagonal: A(i,j) = A(j,i) */
  void trn()
  {
    T** temp = 0;
    size_type old_rows;

    getmem(temp, cols);
    for (size_type i=0; i < cols; ++i){
      getmem( temp[i], rows );
    }
    for(int i=0; i < rows; ++i){
      for(int j=0; j < cols; ++j){
        temp[j][i] = contents[i][j];
      }
    }
    getmem(contents, 0);
    contents = temp;
    old_rows = rows;
    rows = cols;
    cols = old_rows;
  }

    /** Clean below method.
      * Makes equal to zero every element below given factor.
      * \param factor Reference value for cleaning. */
   void cleanBelow(const double factor)
  { for (size_type i=0; i<rows; ++i){
      for (size_type j=0; j<cols; ++j){
        if ( std::abs( contents[i][j] ) < std::abs( static_cast<T>(factor) ) ) contents[i][j] = static_cast<T>(0);
      }
    }
  }

  /** Data pointer method
   * Gives the direction in memory of (pointer to) the object.
   * @return A pointer to the matrix's contents (Type_cmatrix).
   */
  T** data_pointer()
  { return this->contents; }


  bool exists( size_type, size_type )
  { return 1; }


}; // class Type_cmatrix definitions.

  ////////////////////////////////////////////////// Implementing the methods defined previously:

    /** Standard constructor.
      * Creates a new object with parameter contents resized to (rows, columns) dimension.
      * \param rows_in Rows of dense matrix.
      * \param columns_in Columns of dense matrix. */
  template <typename T>
  Type_cmatrix<T>::Type_cmatrix(size_type rows_in, size_type columns_in) :
   Data_mat<T>(), rows(rows_in), cols(columns_in)
    { resize(rows_in, columns_in); }

    /** Resize method.
      * Changes the size of the contents parameter.
      * \param mrows New value for rows of dense matrix.
      * \param ncolumns New value for columns of dense matrix. */
  template <typename T>
  void Type_cmatrix<T>::resize(size_type mrows, size_type ncolumns)
  { if (mrows != this->rows || ncolumns != this->cols){
      getmem(contents, mrows);
      for (size_type i=0; i<mrows; ++i){
        getmem(contents[i], ncolumns);
      }

      rows = mrows;
      cols = ncolumns;
    }
  }


}; // namespace lmx


#endif
